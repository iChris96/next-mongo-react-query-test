import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import styles from '../styles/Home.module.css'

const COLORS = {
  DONE: '#70e170',
  TODO: '#ebc6ba'
}

const Button = (props) => {
  if (props.href) {
    return <a {...props} />
  }

  return <button className={styles.button} type="button" {...props} />
}

const Todo = (props) => {
  const [todo, setTodo] = useState(props.todo)

  const handleToggleTodo =  async () => {
    console.log({todo})
    const response = await fetch('/api/todos', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ todo: {...todo, isCompleted: !todo.isCompleted}})
    })

    const {updatedTodo } = await response.json()
    

    console.log({ updatedTodo })
    setTodo(updatedTodo)
  }

  const todoConfig = {
    backgroundColor: todo.isCompleted ? COLORS.DONE : COLORS.TODO,
    text: todo.isCompleted ? 'DONE' : 'TO DO'
  }

  return <li key={todo._id} className={styles.todoContainer}>
    <div className={styles.todoTitle}>{todo.title}</div>
    <div className={styles.todoCompleted}>{
      <Button 
        onClick={handleToggleTodo}
        style={{backgroundColor: todoConfig.backgroundColor}}
      >
        {todoConfig.text}</Button>}
      </div>
    <div className={styles.todoRemoved}><Button>REMOVE</Button></div>
  </li>
}

const useFetch = (url) => { //'api/todos'
  const [data, setData] = useState(null)
  const [error, setError] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  const getData = async () => {
    try {
      const response = await fetch(url);
      const data = await response.json()
      setData(data)
    } catch (error) {
      console.log({ error })
      setError(error)
    }
    setIsLoading(false)
  }

  const reload = () => {
    setIsLoading(true)
    setTimeout(() => {
      getData()
    }, 3000);
  }


  useEffect(() => {
    setTimeout(() => {
      getData()
    }, 1000);
  }, [])

  return { data, error, isLoading, reload }
}

export default function Home() {
  const { data: todosData, error: todosError, isLoading: todosLoading, reload: reloadTodos } = useFetch('api/todos')
  const titleRef = useRef()

  const handleSubmit = async (event) => {
    event.preventDefault();

    const { current: { value: title } } = titleRef

    if (!title) return;

    const response = await fetch('/api/todos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, isCompleted: false })
    })

    const data = await response.json()

    console.log({ data })

    titleRef.current.value = ''
    reloadTodos();
  }

  const renderTodos = () => {

    if (todosLoading) return <p>Loading Todos...</p>

    if (todosError) return <p>Todos Error</p>

    const { todos } = todosData;

    if (!todos) return <p>Empty todos</p>

    return <>
      <h3 style={{ textAlign: 'center' }}>Todos List</h3>
      <ul className={styles.ul}>
        {todos.map(todo => <Todo key={todo._id} todo={todo} />)}
      </ul>
    </>
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

      </Head>

      <main className={styles.main}>
        <section className={styles.sectionTop}>
          <Button onClick={reloadTodos}>RELOAD DATA</Button>
          <Button onClick={reloadTodos}>RELOAD DATA</Button>
        </section>
        <section>
          <h3>Create new todo</h3>
          <form onSubmit={handleSubmit}>
            <label>
              Title:
              <input type="text" ref={titleRef} />
            </label>
            <input type="submit" value="Submit" />
          </form>
        </section>

        <section style={{ width: '70%' }}>
          {renderTodos()}
        </section>

        <section>
          
        </section>
      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  )
}
